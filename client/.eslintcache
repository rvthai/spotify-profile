[{"D:\\projects\\spotify-profile\\client\\src\\styles\\Button.js":"1","D:\\projects\\spotify-profile\\client\\src\\styles\\Label.js":"2","D:\\projects\\spotify-profile\\client\\src\\pages\\Profile.js":"3","D:\\projects\\spotify-profile\\client\\src\\components\\Loader.js":"4","D:\\projects\\spotify-profile\\client\\src\\pages\\TopTracks.js":"5","D:\\projects\\spotify-profile\\client\\src\\components\\Track.js":"6","D:\\projects\\spotify-profile\\client\\src\\styles\\Nav.js":"7","D:\\projects\\spotify-profile\\client\\src\\components\\Navbar.js":"8","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\PauseIcon.js":"9","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\PlayIcon.js":"10","D:\\projects\\spotify-profile\\client\\src\\utils\\index.js":"11","D:\\projects\\spotify-profile\\client\\src\\index.js":"12","D:\\projects\\spotify-profile\\client\\src\\styles\\Header.js":"13","D:\\projects\\spotify-profile\\client\\src\\styles\\Main.js":"14","D:\\projects\\spotify-profile\\client\\src\\styles\\theme.js":"15","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\NoMusicIcon.js":"16","D:\\projects\\spotify-profile\\client\\src\\styles\\PageHeader.js":"17","D:\\projects\\spotify-profile\\client\\src\\pages\\TopArtists.js":"18","D:\\projects\\spotify-profile\\client\\src\\pages\\TopGenres.js":"19","D:\\projects\\spotify-profile\\client\\src\\components\\Ranges.js":"20","D:\\projects\\spotify-profile\\client\\src\\styles\\media.js":"21","D:\\projects\\spotify-profile\\client\\src\\styles\\Image.js":"22","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\InfoIcon.js":"23","D:\\projects\\spotify-profile\\client\\src\\styles\\Section.js":"24","D:\\projects\\spotify-profile\\client\\src\\styles\\GlobalStyle.js":"25","D:\\projects\\spotify-profile\\client\\src\\components\\Home.js":"26","D:\\projects\\spotify-profile\\client\\src\\components\\Genre.js":"27","D:\\projects\\spotify-profile\\client\\src\\components\\Trend.js":"28","D:\\projects\\spotify-profile\\client\\src\\styles\\mixins.js":"29","D:\\projects\\spotify-profile\\client\\src\\components\\ArtistBubble.js":"30","D:\\projects\\spotify-profile\\client\\src\\pages\\PageNotFound.js":"31","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\BackIcon.js":"32","D:\\projects\\spotify-profile\\client\\src\\components\\User.js":"33","D:\\projects\\spotify-profile\\client\\src\\components\\TopGenresPreview.js":"34","D:\\projects\\spotify-profile\\client\\src\\pages\\Artist.js":"35","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\ArtistIcon.js":"36","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\GithubIcon.js":"37","D:\\projects\\spotify-profile\\client\\src\\styles\\index.js":"38","D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\TrackIcon.js":"39","D:\\projects\\spotify-profile\\client\\src\\components\\Artist.js":"40"},{"size":327,"mtime":1611534692277,"results":"41","hashOfConfig":"42"},{"size":212,"mtime":1611873765276,"results":"43","hashOfConfig":"42"},{"size":6114,"mtime":1612227830737,"results":"44","hashOfConfig":"42"},{"size":1289,"mtime":1612403214035,"results":"45","hashOfConfig":"42"},{"size":2934,"mtime":1612324781989,"results":"46","hashOfConfig":"42"},{"size":3971,"mtime":1612403627639,"results":"47","hashOfConfig":"42"},{"size":560,"mtime":1612210279948,"results":"48","hashOfConfig":"42"},{"size":2559,"mtime":1612329958491,"results":"49","hashOfConfig":"42"},{"size":339,"mtime":1612211032920,"results":"50","hashOfConfig":"42"},{"size":403,"mtime":1612211201769,"results":"51","hashOfConfig":"42"},{"size":6852,"mtime":1612387889932,"results":"52","hashOfConfig":"42"},{"size":440,"mtime":1606772367305,"results":"53","hashOfConfig":"42"},{"size":327,"mtime":1612153669066,"results":"54","hashOfConfig":"42"},{"size":483,"mtime":1612324470931,"results":"55","hashOfConfig":"42"},{"size":689,"mtime":1612224096096,"results":"56","hashOfConfig":"42"},{"size":570,"mtime":1612225382423,"results":"57","hashOfConfig":"42"},{"size":343,"mtime":1612324742315,"results":"58","hashOfConfig":"42"},{"size":2535,"mtime":1612413788475,"results":"59","hashOfConfig":"42"},{"size":5133,"mtime":1612227058646,"results":"60","hashOfConfig":"42"},{"size":1499,"mtime":1612325166492,"results":"61","hashOfConfig":"42"},{"size":441,"mtime":1612403593222,"results":"62","hashOfConfig":"42"},{"size":140,"mtime":1612312121340,"results":"63","hashOfConfig":"42"},{"size":457,"mtime":1612305829476,"results":"64","hashOfConfig":"42"},{"size":322,"mtime":1612153669067,"results":"65","hashOfConfig":"42"},{"size":2008,"mtime":1612414543913,"results":"66","hashOfConfig":"42"},{"size":1293,"mtime":1612404089115,"results":"67","hashOfConfig":"42"},{"size":1005,"mtime":1611873765241,"results":"68","hashOfConfig":"42"},{"size":2560,"mtime":1611873765270,"results":"69","hashOfConfig":"42"},{"size":1019,"mtime":1612325157008,"results":"70","hashOfConfig":"42"},{"size":2782,"mtime":1612327289283,"results":"71","hashOfConfig":"42"},{"size":890,"mtime":1612328766049,"results":"72","hashOfConfig":"42"},{"size":519,"mtime":1612385676877,"results":"73","hashOfConfig":"42"},{"size":2386,"mtime":1612331048740,"results":"74","hashOfConfig":"42"},{"size":1795,"mtime":1611873765244,"results":"75","hashOfConfig":"42"},{"size":4171,"mtime":1612416625867,"results":"76","hashOfConfig":"42"},{"size":494,"mtime":1612153669058,"results":"77","hashOfConfig":"42"},{"size":1710,"mtime":1612153669059,"results":"78","hashOfConfig":"42"},{"size":625,"mtime":1612153669068,"results":"79","hashOfConfig":"42"},{"size":473,"mtime":1612153669061,"results":"80","hashOfConfig":"42"},{"size":1086,"mtime":1611873765241,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"15cb6kc",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\projects\\spotify-profile\\client\\src\\styles\\Button.js",[],["172","173"],"D:\\projects\\spotify-profile\\client\\src\\styles\\Label.js",[],"D:\\projects\\spotify-profile\\client\\src\\pages\\Profile.js",["174","175","176","177"],"import React, { useEffect, useState } from \"react\";\r\n\r\n// API\r\nimport {\r\n  getUser,\r\n  getFollowing,\r\n  getPlaylists,\r\n  getTopTracks,\r\n  getTopArtists,\r\n  getSeveralArtists,\r\n} from \"utils\";\r\n\r\n// Components\r\nimport User from \"components/User\";\r\nimport TrendsPreview from \"components/TrendsPreview\";\r\nimport TopTracksPreview from \"components/TopTracksPreview\";\r\nimport TopArtistsPreview from \"components/TopArtistsPreview\";\r\nimport TopGenresPreview from \"components/TopGenresPreview\";\r\n\r\n// Styles\r\nimport { Main } from \"styles\";\r\n\r\nfunction Profile() {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Data for current top track and artist\r\n  const [currentTopTrack, setCurrentTopTrack] = useState(null);\r\n  const [currentTopArtist, setCurrentTopArtist] = useState(null);\r\n\r\n  // Data for the previews\r\n  const [topTracks, setTopTracks] = useState(null);\r\n  const [topArtists, setTopArtists] = useState(null);\r\n\r\n  // Data for genre data\r\n  const [topGenres, setTopGenres] = useState(null);\r\n  const [total, setTotal] = useState(0);\r\n  const [max, setMax] = useState(0);\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n    getCurrentTopTrack();\r\n    getCurrentTopArtist();\r\n    getTopTracksData();\r\n    getTopArtistsData();\r\n    getTopGenres();\r\n  }, []);\r\n\r\n  const getUserData = async () => {\r\n    try {\r\n      const userData = await getUser();\r\n      const followingData = await getFollowing();\r\n      const playlistsData = await getPlaylists();\r\n\r\n      const data = {\r\n        user: userData.data,\r\n        following: followingData.data,\r\n        playlists: playlistsData.data,\r\n      };\r\n\r\n      setUser(data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getCurrentTopTrack = async () => {\r\n    try {\r\n      const response = await getTopTracks({\r\n        time_range: \"short_term\",\r\n        limit: 1,\r\n      });\r\n      setCurrentTopTrack(response.data.items[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getCurrentTopArtist = async () => {\r\n    try {\r\n      const response = await getTopArtists({\r\n        time_range: \"short_term\",\r\n        limit: 1,\r\n      });\r\n      setCurrentTopArtist(response.data.items[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getTopTracksData = async () => {\r\n    try {\r\n      const response = await getTopTracks({\r\n        time_range: \"long_term\",\r\n        limit: 5,\r\n      });\r\n      setTopTracks(response.data.items);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getTopArtistsData = async () => {\r\n    try {\r\n      const response = await getTopArtists({\r\n        time_range: \"long_term\",\r\n        limit: 5,\r\n      });\r\n      setTopArtists(response.data.items);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const getTopGenres = async () => {\r\n    // Get the top tracks\r\n    const response = await getTopTracks({\r\n      time_range: \"long_term\",\r\n      limit: 50,\r\n    });\r\n    const tracks = response.data.items;\r\n\r\n    // Get the id of the first artist of each track\r\n    const artists = [];\r\n    for (let i = 0; i < tracks.length; i++) {\r\n      const artist = tracks[i].artists[0];\r\n      if (!artists.includes(artist)) {\r\n        artists.push(artist.id);\r\n      }\r\n    }\r\n\r\n    // Since the getSeveralArtist API has a max limit of 50, we must split up the list if there is more than 50 artists\r\n    let artists_groups = [];\r\n    while (artists.length > 0) {\r\n      if (artists.length >= 50) {\r\n        artists_groups.push(artists.splice(0, 50)); // this gets 50 artists and modifies the array\r\n      } else {\r\n        artists_groups.push(artists.splice(0, artists.length)); // up to the end of the array if less than 50\r\n      }\r\n    }\r\n\r\n    // Make an API call to get the artists and their genres\r\n    let data = null;\r\n    for (let i = 0; i < artists_groups.length; i++) {\r\n      let id_str = artists_groups[i].join(\",\"); // Join a group of artists into a full string to be passed as a query param\r\n      let response = await getSeveralArtists(id_str); // Make the API call\r\n      data = response.data.artists;\r\n    }\r\n\r\n    // Create a map of each genre and their occurence\r\n    let genresMap = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n      let genres = data[i].genres;\r\n      for (let j = 0; j < genres.length; j++) {\r\n        let genre = genres[j];\r\n        if (!genresMap[genre]) {\r\n          genresMap[genre] = 0;\r\n        }\r\n        genresMap[genre] += 1;\r\n      }\r\n    }\r\n\r\n    // Get the top five genres that occur the most by sorting the object (must convert object to array first)\r\n    let entries = Object.entries(genresMap);\r\n    entries.sort((a, b) => b[1] - a[1]);\r\n    entries = entries.splice(0, 5);\r\n\r\n    // Get the total needed to calculate the percentages for the chart\r\n    const t = entries.reduce((accumulator, entry) => accumulator + entry[1], 0);\r\n    //setTotal(total);\r\n    const m = entries.reduce(\r\n      (accumulator, entry) => Math.max(accumulator, entry[1]),\r\n      0\r\n    );\r\n    //setMax((m / t) * 100);\r\n\r\n    // Remake map with top five genres and their respective percentages\r\n    genresMap = entries.reduce((accumulator, entry) => {\r\n      const key = entry[0];\r\n      const value = Math.round((entry[1] / t) * 100); // Convert to a percentage\r\n      accumulator[key] = value;\r\n      return accumulator;\r\n    }, {});\r\n\r\n    // Change state\r\n    setTopGenres(genresMap);\r\n    setMax((m / t) * 100);\r\n    setTotal(total);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Main>\r\n      {!isLoading ? (\r\n        <div>\r\n          {user ? <User data={user} /> : null}\r\n          {/* {currentTopArtist && currentTopTrack ? (\r\n        <TrendsPreview artist={currentTopArtist} track={currentTopTrack} />\r\n      ) : null} */}\r\n          {topTracks ? <TopTracksPreview data={topTracks} /> : null}\r\n          {topArtists ? <TopArtistsPreview data={topArtists} /> : null}\r\n          {topGenres ? <TopGenresPreview data={topGenres} max={max} /> : null}\r\n        </div>\r\n      ) : null}\r\n    </Main>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n",["178","179"],"D:\\projects\\spotify-profile\\client\\src\\components\\Loader.js",["180"],"D:\\projects\\spotify-profile\\client\\src\\pages\\TopTracks.js",[],"D:\\projects\\spotify-profile\\client\\src\\components\\Track.js",["181"],"D:\\projects\\spotify-profile\\client\\src\\styles\\Nav.js",[],["182","183"],"D:\\projects\\spotify-profile\\client\\src\\components\\Navbar.js",[],["184","185"],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\PauseIcon.js",[],["186","187"],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\PlayIcon.js",[],"D:\\projects\\spotify-profile\\client\\src\\utils\\index.js",[],"D:\\projects\\spotify-profile\\client\\src\\index.js",[],"D:\\projects\\spotify-profile\\client\\src\\styles\\Header.js",[],"D:\\projects\\spotify-profile\\client\\src\\styles\\Main.js",[],"D:\\projects\\spotify-profile\\client\\src\\styles\\theme.js",[],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\NoMusicIcon.js",[],"D:\\projects\\spotify-profile\\client\\src\\styles\\PageHeader.js",[],"D:\\projects\\spotify-profile\\client\\src\\pages\\TopArtists.js",[],"D:\\projects\\spotify-profile\\client\\src\\pages\\TopGenres.js",["188"],"import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// API\r\nimport { getTopTracks, getSeveralArtists } from \"utils\";\r\n\r\n// Components\r\nimport Ranges from \"components/Ranges\";\r\nimport Genre from \"components/Genre\";\r\n\r\n// Styles\r\nimport { Main, Section, Header } from \"styles\";\r\nimport { theme } from \"styles\";\r\n\r\nconst { color } = theme;\r\n\r\nconst HeaderA = styled(Header)`\r\n  border: none;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 2em;\r\n`;\r\nconst Title = styled.h1`\r\n  margin: 0;\r\n`;\r\n\r\nconst Bars = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  margin-top: 1em;\r\n`;\r\n\r\nconst Axis = styled.div`\r\n  width: 100%;\r\n  height: 1px;\r\n  background: ${color.gray};\r\n  margin: 1em 0;\r\n`;\r\n\r\nfunction TopGenres(props) {\r\n  // Data for genre data\r\n  const [topGenres, setTopGenres] = useState(null);\r\n  const [total, setTotal] = useState(0);\r\n  const [max, setMax] = useState(0);\r\n  const ratio = Math.round(max / 10) * 10;\r\n  const percent = 80;\r\n  const [term, setTerm] = useState(\"long_term\");\r\n\r\n  const [axisData, setAxisData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getTopGenres();\r\n\r\n    if (max !== 0) {\r\n      const limit = Math.ceil(max / 10) * 10;\r\n      const interval = limit / 5;\r\n      let range = [];\r\n\r\n      for (let i = 0; i <= limit; i += interval) {\r\n        range.push(i);\r\n      }\r\n\r\n      setAxisData(range);\r\n    }\r\n  }, [max, term]);\r\n\r\n  const getTopGenres = async () => {\r\n    // Get the top tracks\r\n    const response = await getTopTracks({\r\n      time_range: term,\r\n      limit: 50,\r\n    });\r\n    const tracks = response.data.items;\r\n\r\n    // Get the id of the first artist of each track\r\n    const artists = [];\r\n    for (let i = 0; i < tracks.length; i++) {\r\n      const artist = tracks[i].artists[0];\r\n      if (!artists.includes(artist)) {\r\n        artists.push(artist.id);\r\n      }\r\n    }\r\n\r\n    // Since the getSeveralArtist API has a max limit of 50, we must split up the list if there is more than 50 artists\r\n    let artists_groups = [];\r\n    while (artists.length > 0) {\r\n      if (artists.length >= 50) {\r\n        artists_groups.push(artists.splice(0, 50)); // this gets 50 artists and modifies the array\r\n      } else {\r\n        artists_groups.push(artists.splice(0, artists.length)); // up to the end of the array if less than 50\r\n      }\r\n    }\r\n\r\n    // Make an API call to get the artists and their genres\r\n    let data = null;\r\n    for (let i = 0; i < artists_groups.length; i++) {\r\n      let id_str = artists_groups[i].join(\",\"); // Join a group of artists into a full string to be passed as a query param\r\n      let response = await getSeveralArtists(id_str); // Make the API call\r\n      data = response.data.artists;\r\n    }\r\n\r\n    // Create a map of each genre and their occurence\r\n    let genresMap = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n      let genres = data[i].genres;\r\n      for (let j = 0; j < genres.length; j++) {\r\n        let genre = genres[j];\r\n        if (!genresMap[genre]) {\r\n          genresMap[genre] = 0;\r\n        }\r\n        genresMap[genre] += 1;\r\n      }\r\n    }\r\n\r\n    // Get the top five genres that occur the most by sorting the object (must convert object to array first)\r\n    let entries = Object.entries(genresMap);\r\n    entries.sort((a, b) => b[1] - a[1]);\r\n    entries = entries.splice(0, 10);\r\n\r\n    // Get the total needed to calculate the percentages for the chart\r\n    const t = entries.reduce((accumulator, entry) => accumulator + entry[1], 0);\r\n    //setTotal(total);\r\n    const m = entries.reduce(\r\n      (accumulator, entry) => Math.max(accumulator, entry[1]),\r\n      0\r\n    );\r\n    //setMax((m / t) * 100);\r\n\r\n    // Remake map with top five genres and their respective percentages\r\n    genresMap = entries.reduce((accumulator, entry) => {\r\n      const key = entry[0];\r\n      const value = Math.round((entry[1] / t) * 100); // Convert to a percentage\r\n      accumulator[key] = value;\r\n      return accumulator;\r\n    }, {});\r\n\r\n    // Change state\r\n    setTopGenres(genresMap);\r\n    setMax((m / t) * 100);\r\n    setTotal(total);\r\n  };\r\n\r\n  const onTermChange = (t) => {\r\n    setTerm(t);\r\n  };\r\n\r\n  return (\r\n    <Main>\r\n      <Section>\r\n        <HeaderA>\r\n          <Title>Top Genres</Title>\r\n          <Ranges onTermChange={onTermChange} />\r\n        </HeaderA>\r\n        {topGenres ? (\r\n          <Bars>\r\n            {Object.keys(topGenres).map((genre, index) => (\r\n              <Genre\r\n                key={index}\r\n                name={genre}\r\n                width={(topGenres[genre] / ratio) * percent}\r\n                percentage={topGenres[genre]}\r\n              />\r\n            ))}\r\n          </Bars>\r\n        ) : null}\r\n        <Axis />\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          {axisData.map((num, index) => (\r\n            <p style={{ color: `${color.gray}` }} key={index}>\r\n              {num}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      </Section>\r\n    </Main>\r\n  );\r\n}\r\n\r\nexport default TopGenres;\r\n",["189","190"],"D:\\projects\\spotify-profile\\client\\src\\components\\Ranges.js",["191"],"D:\\projects\\spotify-profile\\client\\src\\styles\\media.js",[],"D:\\projects\\spotify-profile\\client\\src\\styles\\Image.js",[],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\InfoIcon.js",[],"D:\\projects\\spotify-profile\\client\\src\\styles\\Section.js",[],["192","193"],"D:\\projects\\spotify-profile\\client\\src\\styles\\GlobalStyle.js",[],"D:\\projects\\spotify-profile\\client\\src\\components\\Home.js",[],"D:\\projects\\spotify-profile\\client\\src\\components\\Genre.js",["194","195","196","197"],"D:\\projects\\spotify-profile\\client\\src\\components\\Trend.js",["198"],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { isSingleLine } from \"utils\";\r\n\r\n// Styles\r\nimport { Label, Image, Button } from \"styles\";\r\nimport { theme, mixins, media } from \"styles\";\r\n\r\nconst { color } = theme;\r\n\r\nconst Container = styled.div`\r\n  ${mixins.flexRow}\r\n  align-items: center;\r\n  width: 440px;\r\n\r\n  ${media.desktop`\r\n    width: 100%;\r\n  `}\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  width: 150px;\r\n  height: 150px;\r\n  flex-shrink: 0;\r\n  overflow: hidden;\r\n  box-shadow: 0 6px 10px -5px rgba(0, 0, 0, 0.5);\r\n\r\n  ${media.tablet`\r\n    width: 100px;\r\n    height: 100px;\r\n  `}\r\n`;\r\n\r\nconst BigImage = styled(Image)`\r\n  width: 150px;\r\n\r\n  ${media.tablet`\r\n    width: 100px;\r\n  `}\r\n`;\r\n\r\nconst Info = styled.div`\r\n  ${mixins.flexColumn}\r\n  ${mixins.flexSpaceBetween}\r\n  text-align: left;\r\n  margin-left: 1.25em;\r\n`;\r\n\r\nconst TextWrapper = styled.div`\r\n  ${mixins.flexColumn}\r\n`;\r\n\r\nconst Name = styled.h1`\r\n  color: ${color.white};\r\n  font-size: 30px;\r\n  overflow: hidden;\r\n\r\n  ${(props) =>\r\n    props.singleLine\r\n      ? `\r\n      white-space: nowrap;\r\n      text-overflow: ellipsis;\r\n      `\r\n      : `\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 3;\r\n      -webkit-box-orient: vertical;\r\n  `}\r\n\r\n  ${media.tablet`\r\n  font-size: 24px;\r\n\r\n  ${(props) =>\r\n    props.singleLine\r\n      ? `\r\n      white-space: nowrap;\r\n      text-overflow: ellipsis;\r\n      `\r\n      : `\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 2;\r\n      -webkit-box-orient: vertical;\r\n  `}\r\n`}\r\n`;\r\n\r\nfunction Trend(props) {\r\n  const [singleLine, setSingleLine] = useState();\r\n\r\n  useEffect(() => {\r\n    const el = document.getElementById(\"name\");\r\n    const result = isSingleLine(el);\r\n    setSingleLine(result);\r\n  }, []);\r\n\r\n  const { category, name, image } = props;\r\n\r\n  return (\r\n    <Container>\r\n      <ImageWrapper>\r\n        <BigImage src={image} alt=\"artist\" />\r\n      </ImageWrapper>\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Info>\r\n          <TextWrapper>\r\n            <Label>TOP {category}</Label>\r\n            <div\r\n              style={{ display: \"table\", tableLayout: \"fixed\", width: \"100%\" }}\r\n            >\r\n              <Name id=\"name\" singleLine={singleLine}>\r\n                {name}\r\n              </Name>\r\n            </div>\r\n          </TextWrapper>\r\n        </Info>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Trend;\r\n","D:\\projects\\spotify-profile\\client\\src\\styles\\mixins.js",[],"D:\\projects\\spotify-profile\\client\\src\\components\\ArtistBubble.js",[],"D:\\projects\\spotify-profile\\client\\src\\pages\\PageNotFound.js",["199"],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\BackIcon.js",[],"D:\\projects\\spotify-profile\\client\\src\\components\\User.js",["200"],"D:\\projects\\spotify-profile\\client\\src\\components\\TopGenresPreview.js",[],"D:\\projects\\spotify-profile\\client\\src\\pages\\Artist.js",["201"],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\ArtistIcon.js",[],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\GithubIcon.js",[],"D:\\projects\\spotify-profile\\client\\src\\styles\\index.js",[],"D:\\projects\\spotify-profile\\client\\src\\assets\\icons\\TrackIcon.js",[],"D:\\projects\\spotify-profile\\client\\src\\components\\Artist.js",["202"],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":15,"column":8,"nodeType":"209","messageId":"210","endLine":15,"endColumn":21},{"ruleId":"207","severity":1,"message":"211","line":28,"column":10,"nodeType":"209","messageId":"210","endLine":28,"endColumn":25},{"ruleId":"207","severity":1,"message":"212","line":29,"column":10,"nodeType":"209","messageId":"210","endLine":29,"endColumn":26},{"ruleId":"213","severity":1,"message":"214","line":47,"column":6,"nodeType":"215","endLine":47,"endColumn":8,"suggestions":"216"},{"ruleId":"203","replacedBy":"217"},{"ruleId":"205","replacedBy":"218"},{"ruleId":"207","severity":1,"message":"219","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":15},{"ruleId":"207","severity":1,"message":"220","line":13,"column":25,"nodeType":"209","messageId":"210","endLine":13,"endColumn":30},{"ruleId":"203","replacedBy":"221"},{"ruleId":"205","replacedBy":"222"},{"ruleId":"203","replacedBy":"223"},{"ruleId":"205","replacedBy":"224"},{"ruleId":"203","replacedBy":"225"},{"ruleId":"205","replacedBy":"226"},{"ruleId":"213","severity":1,"message":"214","line":66,"column":6,"nodeType":"215","endLine":66,"endColumn":17,"suggestions":"227"},{"ruleId":"203","replacedBy":"228"},{"ruleId":"205","replacedBy":"229"},{"ruleId":"207","severity":1,"message":"220","line":3,"column":25,"nodeType":"209","messageId":"210","endLine":3,"endColumn":30},{"ruleId":"203","replacedBy":"230"},{"ruleId":"205","replacedBy":"231"},{"ruleId":"207","severity":1,"message":"232","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"233","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"234","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":14},{"ruleId":"207","severity":1,"message":"235","line":37,"column":24,"nodeType":"209","messageId":"210","endLine":37,"endColumn":34},{"ruleId":"207","severity":1,"message":"236","line":6,"column":24,"nodeType":"209","messageId":"210","endLine":6,"endColumn":30},{"ruleId":"207","severity":1,"message":"237","line":7,"column":16,"nodeType":"209","messageId":"210","endLine":7,"endColumn":26},{"ruleId":"207","severity":1,"message":"238","line":4,"column":8,"nodeType":"209","messageId":"210","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"239","line":144,"column":6,"nodeType":"215","endLine":144,"endColumn":8,"suggestions":"240"},{"ruleId":"207","severity":1,"message":"241","line":39,"column":32,"nodeType":"209","messageId":"210","endLine":39,"endColumn":41},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'TrendsPreview' is defined but never used.","Identifier","unusedVar","'currentTopTrack' is assigned a value but never used.","'currentTopArtist' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTopGenres'. Either include it or remove the dependency array.","ArrayExpression",["244"],["242"],["243"],"'theme' is defined but never used.","'media' is defined but never used.",["242"],["243"],["242"],["243"],["242"],["243"],["245"],["242"],["243"],["242"],["243"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Text' is defined but never used.","'percentage' is assigned a value but never used.","'Button' is defined but never used.","'fontWeight' is assigned a value but never used.","'Logout' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["246"],"'followers' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [getTopGenres]",{"range":"253","text":"254"},"Update the dependencies array to be: [getTopGenres, max, term]",{"range":"255","text":"256"},"Update the dependencies array to be: [getData]",{"range":"257","text":"258"},[1304,1306],"[getTopGenres]",[1427,1438],"[getTopGenres, max, term]",[2713,2715],"[getData]"]