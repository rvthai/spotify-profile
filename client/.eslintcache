[{"/Users/ricky/Projects/spotify-profile/client/src/utils/index.js":"1","/Users/ricky/Projects/spotify-profile/client/src/components/TopTracksPreview.js":"2","/Users/ricky/Projects/spotify-profile/client/src/styles/GlobalStyle.js":"3","/Users/ricky/Projects/spotify-profile/client/src/pages/Profile.js":"4","/Users/ricky/Projects/spotify-profile/client/src/styles/Section.js":"5","/Users/ricky/Projects/spotify-profile/client/src/components/TopGenresPreview.js":"6","/Users/ricky/Projects/spotify-profile/client/src/components/TrendsPreview.js":"7","/Users/ricky/Projects/spotify-profile/client/src/styles/mixins.js":"8","/Users/ricky/Projects/spotify-profile/client/src/pages/TopTracks.js":"9"},{"size":4324,"mtime":1611646353902,"results":"10","hashOfConfig":"11"},{"size":2117,"mtime":1611697907367,"results":"12","hashOfConfig":"11"},{"size":1835,"mtime":1611694204653,"results":"13","hashOfConfig":"11"},{"size":5990,"mtime":1611696571386,"results":"14","hashOfConfig":"11"},{"size":232,"mtime":1611696324278,"results":"15","hashOfConfig":"11"},{"size":1937,"mtime":1611696350597,"results":"16","hashOfConfig":"11"},{"size":895,"mtime":1611697931389,"results":"17","hashOfConfig":"11"},{"size":873,"mtime":1611697265667,"results":"18","hashOfConfig":"11"},{"size":1917,"mtime":1611697949319,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18vv5xv",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ricky/Projects/spotify-profile/client/src/utils/index.js",[],"/Users/ricky/Projects/spotify-profile/client/src/components/TopTracksPreview.js",["39"],"/Users/ricky/Projects/spotify-profile/client/src/styles/GlobalStyle.js",[],"/Users/ricky/Projects/spotify-profile/client/src/pages/Profile.js",["40","41","42"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\n// API\nimport {\n  getUser,\n  getFollowing,\n  getPlaylists,\n  getTopTracks,\n  getTopArtists,\n  getSeveralArtists,\n} from \"utils\";\n\n// Components\nimport User from \"components/User\";\nimport TrendsPreview from \"components/TrendsPreview\";\nimport TopTracksPreview from \"components/TopTracksPreview\";\nimport TopArtistsPreview from \"components/TopArtistsPreview\";\nimport TopGenresPreview from \"components/TopGenresPreview\";\n\n// Styles\nimport { Main } from \"styles\";\nimport { mixins } from \"styles\";\n\nfunction Profile() {\n  const [user, setUser] = useState(null);\n\n  // Data for current top track and artist\n  const [currentTopTrack, setCurrentTopTrack] = useState(null);\n  const [currentTopArtist, setCurrentTopArtist] = useState(null);\n\n  // Data for the previews\n  const [topTracks, setTopTracks] = useState(null);\n  const [topArtists, setTopArtists] = useState(null);\n\n  // Data for genre data\n  const [topGenres, setTopGenres] = useState(null);\n  const [total, setTotal] = useState(0);\n  const [max, setMax] = useState(0);\n\n  useEffect(() => {\n    getUserData();\n    getCurrentTopTrack();\n    getCurrentTopArtist();\n    getTopTracksData();\n    getTopArtistsData();\n    getTopGenres();\n  }, []);\n\n  const getUserData = async () => {\n    try {\n      const userData = await getUser();\n      const followingData = await getFollowing();\n      const playlistsData = await getPlaylists();\n\n      const data = {\n        user: userData.data,\n        following: followingData.data,\n        playlists: playlistsData.data,\n      };\n\n      setUser(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCurrentTopTrack = async () => {\n    try {\n      const response = await getTopTracks({\n        time_range: \"short_term\",\n        limit: 1,\n      });\n      setCurrentTopTrack(response.data.items[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCurrentTopArtist = async () => {\n    try {\n      const response = await getTopArtists({\n        time_range: \"short_term\",\n        limit: 1,\n      });\n      setCurrentTopArtist(response.data.items[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTopTracksData = async () => {\n    try {\n      const response = await getTopTracks({\n        time_range: \"long_term\",\n        limit: 5,\n      });\n      setTopTracks(response.data.items);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTopArtistsData = async () => {\n    try {\n      const response = await getTopArtists({\n        time_range: \"long_term\",\n        limit: 5,\n      });\n      setTopArtists(response.data.items);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTopGenres = async () => {\n    // Get the top tracks\n    const response = await getTopTracks({\n      time_range: \"long_term\",\n      limit: 50,\n    });\n    const tracks = response.data.items;\n\n    // Get the id of the first artist of each track\n    const artists = [];\n    for (let i = 0; i < tracks.length; i++) {\n      const artist = tracks[i].artists[0];\n      if (!artists.includes(artist)) {\n        artists.push(artist.id);\n      }\n    }\n\n    // Since the getSeveralArtist API has a max limit of 50, we must split up the list if there is more than 50 artists\n    let artists_groups = [];\n    while (artists.length > 0) {\n      if (artists.length >= 50) {\n        artists_groups.push(artists.splice(0, 50)); // this gets 50 artists and modifies the array\n      } else {\n        artists_groups.push(artists.splice(0, artists.length)); // up to the end of the array if less than 50\n      }\n    }\n\n    // Make an API call to get the artists and their genres\n    let data = null;\n    for (let i = 0; i < artists_groups.length; i++) {\n      let id_str = artists_groups[i].join(\",\"); // Join a group of artists into a full string to be passed as a query param\n      let response = await getSeveralArtists(id_str); // Make the API call\n      data = response.data.artists;\n    }\n\n    // Create a map of each genre and their occurence\n    let genresMap = {};\n    for (let i = 0; i < data.length; i++) {\n      let genres = data[i].genres;\n      for (let j = 0; j < genres.length; j++) {\n        let genre = genres[j];\n        if (!genresMap[genre]) {\n          genresMap[genre] = 0;\n        }\n        genresMap[genre] += 1;\n      }\n    }\n\n    // Get the top five genres that occur the most by sorting the object (must convert object to array first)\n    let entries = Object.entries(genresMap);\n    entries.sort((a, b) => b[1] - a[1]);\n    entries = entries.splice(0, 5);\n\n    // Get the total needed to calculate the percentages for the chart\n    const t = entries.reduce((accumulator, entry) => accumulator + entry[1], 0);\n    //setTotal(total);\n    const m = entries.reduce(\n      (accumulator, entry) => Math.max(accumulator, entry[1]),\n      0\n    );\n    //setMax((m / t) * 100);\n\n    // Remake map with top five genres and their respective percentages\n    genresMap = entries.reduce((accumulator, entry) => {\n      const key = entry[0];\n      const value = Math.round((entry[1] / t) * 100); // Convert to a percentage\n      accumulator[key] = value;\n      return accumulator;\n    }, {});\n\n    // Change state\n    setTopGenres(genresMap);\n    setMax((m / t) * 100);\n    setTotal(total);\n  };\n\n  return (\n    <Main>\n      {user ? <User data={user} /> : null}\n      <div style={{ width: \"80%\", display: \"flex\", alignItems: \"flex-start\" }}>\n        {currentTopArtist && currentTopTrack ? (\n          <TrendsPreview artist={currentTopArtist} track={currentTopTrack} />\n        ) : null}\n        {topGenres ? <TopGenresPreview data={topGenres} max={max} /> : null}\n      </div>\n      {topTracks ? <TopTracksPreview data={topTracks} /> : null}\n      {topArtists ? <TopArtistsPreview data={topArtists} /> : null}\n      {/* {topGenres ? <TopGenresPreview data={topGenres} max={max} /> : null} */}\n    </Main>\n  );\n}\n\nexport default Profile;\n","/Users/ricky/Projects/spotify-profile/client/src/styles/Section.js",[],"/Users/ricky/Projects/spotify-profile/client/src/components/TopGenresPreview.js",[],"/Users/ricky/Projects/spotify-profile/client/src/components/TrendsPreview.js",[],"/Users/ricky/Projects/spotify-profile/client/src/styles/mixins.js",[],"/Users/ricky/Projects/spotify-profile/client/src/pages/TopTracks.js",["43"],{"ruleId":"44","severity":1,"message":"45","line":2,"column":10,"nodeType":"46","messageId":"47","endLine":2,"endColumn":14},{"ruleId":"44","severity":1,"message":"48","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":14},{"ruleId":"44","severity":1,"message":"49","line":23,"column":10,"nodeType":"46","messageId":"47","endLine":23,"endColumn":16},{"ruleId":"50","severity":1,"message":"51","line":48,"column":6,"nodeType":"52","endLine":48,"endColumn":8,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":16,"column":6,"nodeType":"52","endLine":16,"endColumn":17,"suggestions":"55"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'mixins' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTopGenres'. Either include it or remove the dependency array.","ArrayExpression",["56"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["57"],{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [getTopGenres]",{"range":"62","text":"63"},"Update the dependencies array to be: [getData, timeRange]",{"range":"64","text":"65"},[1279,1281],"[getTopGenres]",[354,365],"[getData, timeRange]"]